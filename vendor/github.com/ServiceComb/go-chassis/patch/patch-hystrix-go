diff --git a/hystrix/circuit.go b/hystrix/circuit.go
index b92d98f..3743690 100644
--- a/hystrix/circuit.go
+++ b/hystrix/circuit.go
@@ -13,12 +13,14 @@ import (
 type CircuitBreaker struct {
 	Name                   string
 	open                   bool
+	enabled                bool
 	forceOpen              bool
+	forceClosed            bool
 	mutex                  *sync.RWMutex
 	openedOrLastTestedTime int64
 
-	executorPool *executorPool
-	metrics      *metricExchange
+	executorPool           *executorPool
+	metrics                *metricExchange
 }
 
 var (
@@ -52,7 +54,18 @@ func GetCircuit(name string) (*CircuitBreaker, bool, error) {
 
 	return circuitBreakers[name], !ok, nil
 }
+func FlushByName(name string) {
+	circuitBreakersMutex.Lock()
+	defer circuitBreakersMutex.Unlock()
+	cb, ok := circuitBreakers[name]
+	if ok {
+		log.Println("Delete Circuit Breaker:", name)
+		cb.metrics.Reset()
+		cb.executorPool.Metrics.Reset()
+		delete(circuitBreakers, name)
+	}
 
+}
 // Flush purges all circuit and metric information from memory.
 func Flush() {
 	circuitBreakersMutex.Lock()
@@ -72,13 +85,16 @@ func newCircuitBreaker(name string) *CircuitBreaker {
 	c.metrics = newMetricExchange(name)
 	c.executorPool = newExecutorPool(name)
 	c.mutex = &sync.RWMutex{}
-
+	//定制治理选项forceClosed
+	c.forceOpen = getSettings(name).ForceOpen
+	c.forceClosed = getSettings(name).ForceClose
+	c.enabled = getSettings(name).CircuitBreakerEnabled
 	return c
 }
 
 // toggleForceOpen allows manually causing the fallback logic for all instances
 // of a given command.
-func (circuit *CircuitBreaker) toggleForceOpen(toggle bool) error {
+func (circuit *CircuitBreaker) ToggleForceOpen(toggle bool) error {
 	circuit, _, err := GetCircuit(circuit.Name)
 	if err != nil {
 		return err
@@ -116,6 +132,13 @@ func (circuit *CircuitBreaker) IsOpen() bool {
 // When the circuit is open, this call will occasionally return true to measure whether the external service
 // has recovered.
 func (circuit *CircuitBreaker) AllowRequest() bool {
+	if circuit.forceOpen {
+		return false
+	}
+	//如果不允许熔断，直接返回
+	if circuit.forceClosed {
+		return true
+	}
 	return !circuit.IsOpen() || circuit.allowSingleTest()
 }
 
@@ -125,7 +148,7 @@ func (circuit *CircuitBreaker) allowSingleTest() bool {
 
 	now := time.Now().UnixNano()
 	openedOrLastTestedTime := atomic.LoadInt64(&circuit.openedOrLastTestedTime)
-	if circuit.open && now > openedOrLastTestedTime+getSettings(circuit.Name).SleepWindow.Nanoseconds() {
+	if circuit.open && now > openedOrLastTestedTime + getSettings(circuit.Name).SleepWindow.Nanoseconds() {
 		swapped := atomic.CompareAndSwapInt64(&circuit.openedOrLastTestedTime, openedOrLastTestedTime, now)
 		if swapped {
 			log.Printf("hystrix-go: allowing single test to possibly close circuit %v", circuit.Name)
@@ -137,6 +160,7 @@ func (circuit *CircuitBreaker) allowSingleTest() bool {
 }
 
 func (circuit *CircuitBreaker) setOpen() {
+
 	circuit.mutex.Lock()
 	defer circuit.mutex.Unlock()
 
diff --git a/hystrix/hystrix.go b/hystrix/hystrix.go
index b7127d9..e02d352 100644
--- a/hystrix/hystrix.go
+++ b/hystrix/hystrix.go
@@ -17,7 +17,7 @@ type CircuitError struct {
 }
 
 func (e CircuitError) Error() string {
-	return "hystrix: " + e.Message
+	return e.Message
 }
 
 // command models the state used for a single execution on a circuit. "hystrix command" is commonly
@@ -45,6 +45,8 @@ var (
 	ErrCircuitOpen = CircuitError{Message: "circuit open"}
 	// ErrTimeout occurs when the provided function takes too long to execute.
 	ErrTimeout = CircuitError{Message: "timeout"}
+	// ErrForceFallback occurs when force fallback is true
+	ErrForceFallback = CircuitError{Message: "force fallback"}
 )
 
 // Go runs your function while tracking the health of previous calls to it.
@@ -74,14 +76,23 @@ func Go(name string, run runFunc, fallback fallbackFunc) chan error {
 	cmd.circuit = circuit
 
 	go func() {
-		defer func() { cmd.finished <- true }()
+		defer func() {
+			cmd.finished <- true
+		}()
 
+		//Forcefallback is true
+		if getSettings(name).ForceFallback {
+			cmd.errorWithFallback(ErrForceFallback)
+			return
+		}
 		// Circuits get opened when recent executions have shown to have a high error rate.
 		// Rejecting new executions allows backends to recover, and the circuit will allow
 		// new traffic when it feels a healthly state has returned.
-		if !cmd.circuit.AllowRequest() {
-			cmd.errorWithFallback(ErrCircuitOpen)
-			return
+		if getSettings(name).CircuitBreakerEnabled {
+			if !cmd.circuit.AllowRequest() {
+				cmd.errorWithFallback(ErrCircuitOpen)
+				return
+			}
 		}
 
 		// As backends falter, requests take longer but don't always fail.
@@ -125,19 +136,24 @@ func Go(name string, run runFunc, fallback fallbackFunc) chan error {
 				log.Print(err)
 			}
 		}()
+		//增加定制逻辑可以不启用timeout检测
+		if getSettings(name).TimeoutEnabled {
+			timer := time.NewTimer(getSettings(name).Timeout)
+			defer timer.Stop()
 
-		timer := time.NewTimer(getSettings(name).Timeout)
-		defer timer.Stop()
+			select {
+			case <-cmd.finished:
+			case <-timer.C:
 
-		select {
-		case <-cmd.finished:
-		case <-timer.C:
-			cmd.Lock()
-			cmd.timedOut = true
-			cmd.Unlock()
+				cmd.Lock()
+				cmd.timedOut = true
+				cmd.Unlock()
+				cmd.errorWithFallback(ErrTimeout)
 
-			cmd.errorWithFallback(ErrTimeout)
-			return
+				return
+			}
+		} else {
+			<-cmd.finished
 		}
 	}()
 
@@ -210,6 +226,8 @@ func (c *command) errorWithFallback(err error) {
 			eventType = "rejected"
 		} else if err == ErrTimeout {
 			eventType = "timeout"
+		} else if err == ErrForceFallback {
+			eventType = "force fallback"
 		}
 
 		c.reportEvent(eventType)
@@ -222,6 +240,7 @@ func (c *command) errorWithFallback(err error) {
 
 func (c *command) tryFallback(err error) error {
 	if c.fallback == nil {
+
 		// If we don't have a fallback return the original error.
 		return err
 	}
diff --git a/hystrix/hystrix_test.go b/hystrix/hystrix_test.go
index 3a34125..be403b5 100644
--- a/hystrix/hystrix_test.go
+++ b/hystrix/hystrix_test.go
@@ -161,7 +161,7 @@ func TestForceOpenCircuit(t *testing.T) {
 		cb, _, err := GetCircuit("")
 		So(err, ShouldEqual, nil)
 
-		cb.toggleForceOpen(true)
+		cb.ToggleForceOpen(true)
 
 		errChan := Go("", func() error {
 			return nil
diff --git a/hystrix/pool.go b/hystrix/pool.go
index d2c58c8..0c646d8 100644
--- a/hystrix/pool.go
+++ b/hystrix/pool.go
@@ -7,11 +7,16 @@ type executorPool struct {
 	Tickets chan *struct{}
 }
 
+const ConcurrentRequestsLimit = 1000
+
 func newExecutorPool(name string) *executorPool {
 	p := &executorPool{}
 	p.Name = name
 	p.Metrics = newPoolMetrics(name)
 	p.Max = getSettings(name).MaxConcurrentRequests
+	if p.Max > ConcurrentRequestsLimit {
+		p.Max = ConcurrentRequestsLimit
+	}
 
 	p.Tickets = make(chan *struct{}, p.Max)
 	for i := 0; i < p.Max; i++ {
diff --git a/hystrix/settings.go b/hystrix/settings.go
index 462183c..ca90c0a 100644
--- a/hystrix/settings.go
+++ b/hystrix/settings.go
@@ -8,37 +8,58 @@ import (
 var (
 	// DefaultTimeout is how long to wait for command to complete, in milliseconds
 	DefaultTimeout = 1000
+
 	// DefaultMaxConcurrent is how many commands of the same type can run at the same time
 	DefaultMaxConcurrent = 10
+
 	// DefaultVolumeThreshold is the minimum number of requests needed before a circuit can be tripped due to health
 	DefaultVolumeThreshold = 20
+
 	// DefaultSleepWindow is how long, in milliseconds, to wait after a circuit opens before testing for recovery
 	DefaultSleepWindow = 5000
+
 	// DefaultErrorPercentThreshold causes circuits to open once the rolling measure of errors exceeds this percent of requests
 	DefaultErrorPercentThreshold = 50
 )
 
 type Settings struct {
-	Timeout                time.Duration
-	MaxConcurrentRequests  int
+	// isolation 属性
+	Timeout               time.Duration
+	TimeoutEnabled        bool
+	MaxConcurrentRequests int
+
+	// circuit break 属性
+	CircuitBreakerEnabled  bool
 	RequestVolumeThreshold uint64
 	SleepWindow            time.Duration
 	ErrorPercentThreshold  int
+
+	//动态治理
+	ForceFallback bool
+	ForceOpen  bool
+	ForceClose bool
 }
 
 // CommandConfig is used to tune circuit settings at runtime
 type CommandConfig struct {
+	TimeoutEnabled         bool
 	Timeout                int `json:"timeout"`
 	MaxConcurrentRequests  int `json:"max_concurrent_requests"`
 	RequestVolumeThreshold int `json:"request_volume_threshold"`
 	SleepWindow            int `json:"sleep_window"`
 	ErrorPercentThreshold  int `json:"error_percent_threshold"`
+	//动态治理
+	ForceFallback         bool
+	CircuitBreakerEnabled bool
+	ForceOpen             bool
+	ForceClose            bool
 }
 
 var circuitSettings map[string]*Settings
 var settingsMutex *sync.RWMutex
 
 func init() {
+	// 配置文件中优先级Operation > Schema > Default,实现源码中配置属性
 	circuitSettings = make(map[string]*Settings)
 	settingsMutex = &sync.RWMutex{}
 }
@@ -50,8 +71,52 @@ func Configure(cmds map[string]CommandConfig) {
 	}
 }
 
+type CommandConfigOption func(*CommandConfig)
+
+// 新建一个CommandConfig返回
+func NewCommandConfig(opt ...CommandConfigOption) CommandConfig {
+	cmdconfig := CommandConfig{}
+
+	for _, o := range opt {
+		o(&cmdconfig)
+	}
+
+	return cmdconfig
+}
+
+func WithTimeOut(timeout int) CommandConfigOption {
+	return func(c *CommandConfig) {
+		c.Timeout = timeout
+	}
+}
+
+func WithMaxRequests(maxrequests int) CommandConfigOption {
+	return func(c *CommandConfig) {
+		c.MaxConcurrentRequests = maxrequests
+	}
+}
+
+func WithVolumeThreshold(volumethreshold int) CommandConfigOption {
+	return func(c *CommandConfig) {
+		c.RequestVolumeThreshold = volumethreshold
+	}
+}
+
+func WithSleepWindow(sleepwindow int) CommandConfigOption {
+	return func(c *CommandConfig) {
+		c.SleepWindow = sleepwindow
+	}
+}
+
+func WithErrorPercent(errorpercent int) CommandConfigOption {
+	return func(c *CommandConfig) {
+		c.ErrorPercentThreshold = errorpercent
+	}
+}
+
 // ConfigureCommand applies settings for a circuit
 func ConfigureCommand(name string, config CommandConfig) {
+
 	settingsMutex.Lock()
 	defer settingsMutex.Unlock()
 
@@ -79,13 +144,17 @@ func ConfigureCommand(name string, config CommandConfig) {
 	if config.ErrorPercentThreshold != 0 {
 		errorPercent = config.ErrorPercentThreshold
 	}
-
 	circuitSettings[name] = &Settings{
+		TimeoutEnabled:         config.TimeoutEnabled,
+		ForceClose:             config.ForceClose,
+		ForceOpen:              config.ForceOpen,
+		CircuitBreakerEnabled:  config.CircuitBreakerEnabled,
 		Timeout:                time.Duration(timeout) * time.Millisecond,
 		MaxConcurrentRequests:  max,
 		RequestVolumeThreshold: uint64(volume),
 		SleepWindow:            time.Duration(sleep) * time.Millisecond,
 		ErrorPercentThreshold:  errorPercent,
+		ForceFallback:		config.ForceFallback,
 	}
 }
 
diff --git a/hystrix/settings_test.go b/hystrix/settings_test.go
index 5167107..df9c395 100644
--- a/hystrix/settings_test.go
+++ b/hystrix/settings_test.go
@@ -3,57 +3,56 @@ package hystrix
 import (
 	"testing"
 	"time"
-
-	. "github.com/smartystreets/goconvey/convey"
+	"github.com/smartystreets/goconvey/convey"
 )
 
 func TestConfigureConcurrency(t *testing.T) {
-	Convey("given a command configured for 100 concurrent requests", t, func() {
+	convey.Convey("given a command configured for 100 concurrent requests", t, func() {
 		ConfigureCommand("", CommandConfig{MaxConcurrentRequests: 100})
 
-		Convey("reading the concurrency should be the same", func() {
-			So(getSettings("").MaxConcurrentRequests, ShouldEqual, 100)
+		convey.Convey("reading the concurrency should be the same", func() {
+			convey.So(getSettings("").MaxConcurrentRequests, convey.ShouldEqual, 100)
 		})
 	})
 }
 
 func TestConfigureTimeout(t *testing.T) {
-	Convey("given a command configured for a 10000 milliseconds", t, func() {
+	convey.Convey("given a command configured for a 10000 milliseconds", t, func() {
 		ConfigureCommand("", CommandConfig{Timeout: 10000})
 
-		Convey("reading the timeout should be the same", func() {
-			So(getSettings("").Timeout, ShouldEqual, time.Duration(10*time.Second))
+		convey.Convey("reading the timeout should be the same", func() {
+			convey.So(getSettings("").Timeout, convey.ShouldEqual, time.Duration(10*time.Second))
 		})
 	})
 }
 
 func TestConfigureRVT(t *testing.T) {
-	Convey("given a command configured to need 30 requests before tripping the circuit", t, func() {
+	convey.Convey("given a command configured to need 30 requests before tripping the circuit", t, func() {
 		ConfigureCommand("", CommandConfig{RequestVolumeThreshold: 30})
 
-		Convey("reading the threshold should be the same", func() {
-			So(getSettings("").RequestVolumeThreshold, ShouldEqual, uint64(30))
+		convey.Convey("reading the threshold should be the same", func() {
+			convey.So(getSettings("").RequestVolumeThreshold, convey.ShouldEqual, uint64(30))
 		})
 	})
 }
 
 func TestSleepWindowDefault(t *testing.T) {
-	Convey("given default settings", t, func() {
+	convey.Convey("given default settings", t, func() {
 		ConfigureCommand("", CommandConfig{})
 
-		Convey("the sleep window should be 5 seconds", func() {
-			So(getSettings("").SleepWindow, ShouldEqual, time.Duration(5*time.Second))
+		convey.Convey("the sleep window should be 5 seconds", func() {
+			convey.So(getSettings("").SleepWindow, convey.ShouldEqual, time.Duration(5*time.Second))
 		})
 	})
 }
 
 func TestGetCircuitSettings(t *testing.T) {
-	Convey("when calling GetCircuitSettings", t, func() {
+	convey.Convey("when calling GetCircuitSettings", t, func() {
 		ConfigureCommand("test", CommandConfig{Timeout: 30000})
 
-		Convey("should read the same setting just added", func() {
-			So(GetCircuitSettings()["test"], ShouldEqual, getSettings("test"))
-			So(GetCircuitSettings()["test"].Timeout, ShouldEqual, time.Duration(30*time.Second))
+		convey.Convey("should read the same setting just added", func() {
+			convey.So(GetCircuitSettings()["test"], convey.ShouldEqual, getSettings("test"))
+			convey.So(GetCircuitSettings()["test"].Timeout, convey.ShouldEqual, time.Duration(30*time.Second))
 		})
 	})
 }
